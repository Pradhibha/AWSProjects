{"ast":null,"code":"/* eslint-disable import/no-extraneous-dependencies */\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\nimport AWS from 'aws-sdk';\nimport Auth from '@aws-amplify/auth';\n/**\r\n * @class IdentityService\r\n */\n\nexport class IdentityService {\n  /**\r\n   * @param {region}  region AWS region.\r\n   * @param {userPoolId} userPoolId Cognito User Pool Id.\r\n   */\n  constructor(region, userPoolId) {\n    this._userPoolId = userPoolId;\n    this._region = region;\n  }\n\n  async getUsers(limit = 60) {\n    try {\n      const users = await this._identityClient.listUsers({\n        Limit: limit,\n        UserPoolId: this._userPoolId\n      }).promise();\n      return users.Users;\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  async searchByName(name) {\n    try {\n      const list = await this._identityClient.listUsers({\n        Filter: `username ^= \"${name}\"`,\n        Limit: 10,\n        UserPoolId: this._userPoolId\n      }).promise();\n      return list.Users;\n    } catch (err) {\n      throw new Error(`Failed with error: ${err}`);\n    }\n  }\n\n  async setupClient() {\n    const creds = await Auth.currentCredentials();\n    if (!creds) return;\n    this._identityClient = new AWS.CognitoIdentityServiceProvider({\n      region: this._region,\n      credentials: Auth.essentialCredentials(creds)\n    });\n  }\n\n}\nexport default IdentityService;","map":{"version":3,"sources":["C:/Learning/amazon-cognito-identity-management-workshop/website/src/pages/IdentityService.js"],"names":["AWS","Auth","IdentityService","constructor","region","userPoolId","_userPoolId","_region","getUsers","limit","users","_identityClient","listUsers","Limit","UserPoolId","promise","Users","err","Error","searchByName","name","list","Filter","setupClient","creds","currentCredentials","CognitoIdentityServiceProvider","credentials","essentialCredentials"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,GAAP,MAAgB,SAAhB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,eAAN,CAAsB;AAC3B;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,MAAD,EAASC,UAAT,EAAqB;AAC9B,SAAKC,WAAL,GAAmBD,UAAnB;AACA,SAAKE,OAAL,GAAeH,MAAf;AACD;;AAED,QAAMI,QAAN,CAAeC,KAAK,GAAG,EAAvB,EAA2B;AACzB,QAAI;AACF,YAAMC,KAAK,GAAG,MAAM,KAAKC,eAAL,CACjBC,SADiB,CACP;AACTC,QAAAA,KAAK,EAAEJ,KADE;AAETK,QAAAA,UAAU,EAAE,KAAKR;AAFR,OADO,EAKjBS,OALiB,EAApB;AAOA,aAAOL,KAAK,CAACM,KAAb;AACD,KATD,CASE,OAAOC,GAAP,EAAY;AACZ,YAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD;AACF;;AAED,QAAME,YAAN,CAAmBC,IAAnB,EAAyB;AACvB,QAAI;AACF,YAAMC,IAAI,GAAG,MAAM,KAAKV,eAAL,CAChBC,SADgB,CACN;AACTU,QAAAA,MAAM,EAAG,gBAAeF,IAAK,GADpB;AAETP,QAAAA,KAAK,EAAE,EAFE;AAGTC,QAAAA,UAAU,EAAE,KAAKR;AAHR,OADM,EAMhBS,OANgB,EAAnB;AAQA,aAAOM,IAAI,CAACL,KAAZ;AACD,KAVD,CAUE,OAAOC,GAAP,EAAY;AACZ,YAAM,IAAIC,KAAJ,CAAW,sBAAqBD,GAAI,EAApC,CAAN;AACD;AACF;;AAED,QAAMM,WAAN,GAAoB;AAClB,UAAMC,KAAK,GAAG,MAAMvB,IAAI,CAACwB,kBAAL,EAApB;AACA,QAAI,CAACD,KAAL,EAAY;AAEZ,SAAKb,eAAL,GAAuB,IAAIX,GAAG,CAAC0B,8BAAR,CAAuC;AAC5DtB,MAAAA,MAAM,EAAE,KAAKG,OAD+C;AAE5DoB,MAAAA,WAAW,EAAE1B,IAAI,CAAC2B,oBAAL,CAA0BJ,KAA1B;AAF+C,KAAvC,CAAvB;AAID;;AAjD0B;AAoD7B,eAAetB,eAAf","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\r\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: MIT-0\r\n\r\nimport AWS from 'aws-sdk';\r\nimport Auth from '@aws-amplify/auth';\r\n\r\n/**\r\n * @class IdentityService\r\n */\r\nexport class IdentityService {\r\n  /**\r\n   * @param {region}  region AWS region.\r\n   * @param {userPoolId} userPoolId Cognito User Pool Id.\r\n   */\r\n  constructor(region, userPoolId) {\r\n    this._userPoolId = userPoolId;\r\n    this._region = region;\r\n  }\r\n\r\n  async getUsers(limit = 60) {\r\n    try {\r\n      const users = await this._identityClient\r\n        .listUsers({\r\n          Limit: limit,\r\n          UserPoolId: this._userPoolId\r\n        })\r\n        .promise();\r\n\r\n      return users.Users;\r\n    } catch (err) {\r\n      throw new Error(err);\r\n    }\r\n  }\r\n\r\n  async searchByName(name) {\r\n    try {\r\n      const list = await this._identityClient\r\n        .listUsers({\r\n          Filter: `username ^= \"${name}\"`,\r\n          Limit: 10,\r\n          UserPoolId: this._userPoolId\r\n        })\r\n        .promise();\r\n\r\n      return list.Users;\r\n    } catch (err) {\r\n      throw new Error(`Failed with error: ${err}`);\r\n    }\r\n  }\r\n\r\n  async setupClient() {\r\n    const creds = await Auth.currentCredentials();\r\n    if (!creds) return;\r\n\r\n    this._identityClient = new AWS.CognitoIdentityServiceProvider({\r\n      region: this._region,\r\n      credentials: Auth.essentialCredentials(creds)\r\n    });\r\n  }\r\n}\r\n\r\nexport default IdentityService;"]},"metadata":{},"sourceType":"module"}